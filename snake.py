# CSCI 4478 - Dr Vahid Behzadan
# Name: game.py
# Description: Classes to run a game of snake
# Reference: https://www.youtube.com/watch?v=CD4qAhfFuLo&t=1734s
# Reference: https://pastebin.com/embed_js/jB6k06hG
# Revision: 4/22/2021

import tkinter as tk
from tkinter import messagebox

from cube import *

from screen import *
from heuristics import *

# Graphing
import pandas as pd
import matplotlib.pyplot as plot
import numpy as np
from datetime import datetime

GREEN = (0, 255, 0)

file = "results.txt"


# ------------------------------------------------- Code setting up the basics of the snake game
START_POS = (2, 2)


class Snake(object):
    body = []
    turns = {}

    def __init__(self, color, pos, apples):
        self.color = color
        self.head = cube(pos)
        self.body.append(self.head)
        self.dirnx = 0
        self.dirny = 1

        self.walls = []
        self.walls.append(self.head)
        self.score = 0
        self.obstacles = []
        self.tmpFood = tempFood
        self.next_move = "LEFT"

        self.apples = apples
        self._apple_index = 0
        self.num_of_apples = WINDOW_SIZE if not apples else len(apples)
        self._out_of_apples = False

    def set_obstacles(self, obstacle_pos):
        obstacle = []
        for tup in obstacle_pos:
            obstacle.append(cube(tup, color=(255, 255, 255)))
        self.obstacles = obstacle

    def move(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

            keys = pygame.key.get_pressed()

            for key in keys:
                # print("Head position:", self.head.pos) # lets us see grid pos for head
                if keys[pygame.K_LEFT]:
                    self.dirnx = -1
                    self.dirny = 0
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_RIGHT]:
                    self.dirnx = 1
                    self.dirny = 0
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_UP]:
                    self.dirnx = 0
                    self.dirny = -1
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_DOWN]:
                    self.dirnx = 0
                    self.dirny = 1
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        for i, c in enumerate(self.body):
            p = c.pos[:]
            if p in self.turns:
                turn = self.turns[p]
                c.move(turn[0], turn[1])
                if i == len(self.body) - 1:
                    self.turns.pop(p)
            else:
                if c.dirnx == -1 and c.pos[0] <= 0:
                    c.pos = (c.rows - 1, c.pos[1])
                elif c.dirnx == 1 and c.pos[0] >= c.rows - 1:
                    c.pos = (0, c.pos[1])
                elif c.dirny == 1 and c.pos[1] >= c.rows - 1:
                    c.pos = (c.pos[0], 0)
                elif c.dirny == -1 and c.pos[1] <= 0:
                    c.pos = (c.pos[0], c.rows - 1)
                else:
                    c.move(c.dirnx, c.dirny)

    def moveAuto(self, key):  # use this move method when directions are generated by successor method
        # todo: feed only actions into moveAuto - successors will have state, action, cost
        # print(key)

        if key == "LEFT":
            self.dirnx = -1
            self.dirny = 0
            self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        elif key == "RIGHT":
            self.dirnx = 1
            self.dirny = 0
            self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        elif key == "UP":
            self.dirnx = 0
            self.dirny = -1
            self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        elif key == "DOWN":
            self.dirnx = 0
            self.dirny = 1
            self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        for i, c in enumerate(self.body):
            p = c.pos[:]
            if p in self.turns:
                turn = self.turns[p]
                c.move(turn[0], turn[1])
                if i == len(self.body) - 1:
                    self.turns.pop(p)
            else:
                if c.dirnx == -1 and c.pos[0] <= 0:
                    c.pos = (c.rows - 1, c.pos[1])
                elif c.dirnx == 1 and c.pos[0] >= c.rows - 1:
                    c.pos = (0, c.pos[1])
                elif c.dirny == 1 and c.pos[1] >= c.rows - 1:
                    c.pos = (c.pos[0], 0)
                elif c.dirny == -1 and c.pos[1] <= 0:
                    c.pos = (c.pos[0], c.rows - 1)
                else:
                    c.move(c.dirnx, c.dirny)

        # rewards for QLearning
        if self.is_terminated():  # if done
            return -10
        elif self.isGoalState(self.head.pos):
            return 1
        else:
            return 0
        # exit()

    def reset(self, pos):
        self.head = cube(pos)
        self.body = []
        self.body.append(self.head)
        self.turns = {}
        self.dirnx = 0
        self.dirny = 1

        self.walls = self.body
        self.score = 0

        self._apple_index = 0
        self._out_of_apples = False

    def addCube(self):
        tail = self.body[-1]
        dx, dy = tail.dirnx, tail.dirny

        if dx == 1 and dy == 0:
            self.body.append(cube((tail.pos[0] - 1, tail.pos[1])))
            self.walls = self.body
        elif dx == -1 and dy == 0:
            self.body.append(cube((tail.pos[0] + 1, tail.pos[1])))
            self.walls = self.body
        elif dx == 0 and dy == 1:
            self.body.append(cube((tail.pos[0], tail.pos[1] - 1)))
            self.walls = self.body
        elif dx == 0 and dy == -1:
            self.body.append(cube((tail.pos[0], tail.pos[1] + 1)))
            self.walls = self.body

        global allWalls
        allWalls = self.body

        self.body[-1].dirnx = dx
        self.body[-1].dirny = dy

    def draw(self, surface):
        for i, c in enumerate(self.body):
            if i == 0:
                c.draw(surface, True)
            else:
                c.draw(surface)

    def isGoalState(self, current_pos):
        if current_pos == self.tmpFood.pos:
            # print("Goal state!")
            return True
        else:
            return False

    def getStartState(self):
        return self.head.pos

    def is_terminated(self):
        if self._out_of_apples:
            return True
        all_block_list = [snk.pos for snk in self.body]
        all_block_list += [obs.pos for obs in self.obstacles]
        return len(all_block_list) != len(set(all_block_list))

    def gen_new_food(self, new_pos=None):
        if self.apples:
            pos = self.apples[self._apple_index]
            self.tmpFood.reset(pos, color=GREEN)
            self._apple_index += 1
            if self._apple_index >= self.num_of_apples:
                self._out_of_apples = True
        else:
            if new_pos:
                self.tmpFood.reset(new_pos, color=GREEN)
            else:
                # snack.reset(randomSnack(20, self), color=(0, 255, 0)) #todo modolize the shit out of it
                self.tmpFood.reset(randomSnack(20, self), color=GREEN)

    def getSuccessors(self, current_pos):  # more like surrounding grid positions
        """returns a tuple of states, actions, costs"""

        '''Theoretically the max # of successors that can be generated at once should be 3: in front of the head,
        and the two sides of the head (if we have not eaten food yet we can have 4 successors). We will also make it so
        that the snake can not wrap around the screen.'''

        cost = 0
        wallPositions = []
        for x, wall in enumerate(self.walls):
            wallPositions.append(wall.pos)
        for x, obs in enumerate(self.obstacles):
            wallPositions.append(obs.pos)
        successors = []  # tuple of states, actions, cost (grid pos, direction to get there, cost to get there)
        x, y = current_pos
        possible_moves = [-1, 1]  # x or y can either stay, increase or decrease position by 1
        # print("Current pos (successor function):", current_pos)

        # look at successors for y axis
        for movesX in possible_moves:
            nextX = x + movesX  # x will move, y will stay the same
            nextY = y
            if nextX < 0 or nextX > GRID_SIZE - 1:  # make sure we don't go out of bounds
                continue
            nextState = nextX, nextY
            if nextState not in wallPositions:
                if nextState != current_pos:
                    if nextState not in successors:
                        directionX = ""
                        if movesX == 1:
                            directionX = "RIGHT"
                            cost = (euclideanCost(current_pos, tempFood.pos) / 2)  # prioritize left and right actions
                        elif movesX == -1:
                            directionX = "LEFT"
                            cost = (euclideanCost(current_pos, tempFood.pos) / 2)
                        successors.append((nextState, directionX, cost))

        # look at successors for y axis
        for moves in possible_moves:
            nextX = x
            nextY = y + moves  # y will move, x will stay the same
            if nextY < 0 or nextY > 19:  # make sure we don't go out of bounds
                continue
            nextState = nextX, nextY
            if nextState not in wallPositions:
                if nextState != current_pos:
                    if nextState not in successors:
                        directionY = ""
                        if moves == 1:
                            directionY = "DOWN"
                            cost = euclideanCost(current_pos, tempFood.pos)
                        elif moves == -1:
                            directionY = "UP"
                            cost = euclideanCost(current_pos, tempFood.pos)
                        successors.append((nextState, directionY, cost))

        # todo: toggle to see successors
        # print("Successors:", successors)
        return successors


    def get_new_position(self, action):
        dirnx = 0
        dirny = 0
        if action == "LEFT":
            dirnx += -1
        elif action == "RIGHT":
            dirnx += 1
        elif action == "UP":
            dirny += -1
        elif action == "DOWN":
            dirny += 1
        new_pos = (self.head.pos[0] + dirnx, self.head.pos[1] + dirny)
        return new_pos

    def will_terminate(self, new_pos):
        wall_positions = []
        for x, wall in enumerate(self.walls):
            wall_positions.append(wall.pos)
        for x, obs in enumerate(self.obstacles):
            wall_positions.append(obs.pos)
        return new_pos in wall_positions


def message_box(subject, content):
    root = tk.Tk()
    root.attributes("-topmost", True)
    root.withdraw()
    messagebox.showinfo(subject, content)
    try:
        root.destroy()
    except:
        pass


# global food
tempFood = cube((0, 0), 0, 0)
snack = cube((0, 0), 0, 0)
food = cube((0, 0), 0, 0)

startState = 0


# ------------------------------------------------- End of code setting up the basics of the snake game


# --------------------------------------------------------------------- Running the game normally
def main():
    global s, snack, startState
    my_screen = Screen(WINDOW_SIZE, GRID_SIZE, START_POS)
    # s = snake((255, 0, 0), (10, 10))
    s = Snake(RED, START_POS)
    # snack = cube(randomSnack(rows, s), color=(0, 255, 0))
    snack.reset(randomSnack(my_screen.rows, s), color=(0, 255, 0))

    global food, tempFood
    food.reset(snack.pos, snack.dirnx, snack.dirny, snack.color)
    # tempFood = snack
    tempFood.reset(snack.pos, snack.dirnx, snack.dirny, snack.color)
    flag = True

    clock = pygame.time.Clock()

    while flag:
        # for index, position in enumerate(s.walls):  # we can use this to see current walls (basically our body)
        #     print("Walls:", position.pos)
        pygame.time.delay(50)
        clock.tick(10)
        s.move()
        # s.moveAuto(keyPresses)
        if s.body[0].pos == snack.pos:
            s.addCube()
            # snack = cube(randomSnack(rows, s), color=(0, 255, 0))
            snack.reset(randomSnack(my_screen.rows, s), color=(0, 255, 0))
            # tempFood = food  # use this as testing to try to get food value before it changes
            tempFood.reset(food.pos, food.dirnx, food.dirny, food.color)
            # food = snack  # update food to new value
            food.reset(snack.pos, snack.dirnx, snack.dirny, snack.color)

        for x in range(len(s.body)):
            if s.body[x].pos in list(map(lambda z: z.pos, s.body[x + 1:])):
                print('Score:', len(s.body))
                # message_box('You Lost!\''', \'Play again...\'')
                message_box("u die'd", "dead")
                s.reset((10, 10))
                break

        my_screen.redrawWindow(s, snack)

        # test line
        s.getSuccessors(s.head.pos)  # the head's position works as our current position
        s.isGoalState(s.head.pos)


# --------------------------------------------------------------------- End of running the game normally

# --------------------------------------------------------------------- End of feeding snake game hardcoded directions

# DEFINE CONSTANTS




