# CSCI 4478 - Dr Vahid Behzadan
# Name: game.py
# Description: Classes to run a game of snake
# Reference: https://www.youtube.com/watch?v=CD4qAhfFuLo&t=1734s
# Reference: https://pastebin.com/embed_js/jB6k06hG
# Revision: 4/22/2021

import math
import random
import sys
import pygame
import tkinter as tk
from tkinter import messagebox
from util import *
from Screen import *
from heuristics import *

# Graphing
import pandas as pd
import matplotlib.pyplot as plot
import numpy as np
from datetime import datetime

GRID_SIZE = 20

WINDOW_SIZE = 500

RED = (255, 0, 0)

file = "results.txt"


# ------------------------------------------------- Code setting up the basics of the snake game


class cube(object):
    rows = GRID_SIZE
    w = WINDOW_SIZE

    def __init__(self, start, dirnx=1, dirny=0, color=(255, 0, 0)):
        self.pos = start
        self.dirnx = 1
        self.dirny = 0
        self.color = color

    def move(self, dirnx, dirny):
        self.dirnx = dirnx
        self.dirny = dirny
        self.pos = (self.pos[0] + self.dirnx, self.pos[1] + self.dirny)

    def reset(self, start, dirnx=1, dirny=0, color=(255, 0, 0)):
        self.pos = start
        self.dirnx = 1
        self.dirny = 0
        self.color = color

    def draw(self, surface, eyes=False):
        dis = self.w // self.rows
        i = self.pos[0]
        j = self.pos[1]

        pygame.draw.rect(surface, self.color, (i * dis + 1, j * dis + 1, dis - 2, dis - 2))
        if eyes:
            centre = dis // 2
            radius = 3
            circleMiddle = (i * dis + centre - radius, j * dis + 8)
            circleMiddle2 = (i * dis + dis - radius * 2, j * dis + 8)
            pygame.draw.circle(surface, (0, 0, 0), circleMiddle, radius)
            pygame.draw.circle(surface, (0, 0, 0), circleMiddle2, radius)


class snake(object):
    body = []
    turns = {}

    def __init__(self, color, pos):
        self.color = color
        self.head = cube(pos)
        self.body.append(self.head)
        self.dirnx = 0
        self.dirny = 1

        self.walls = []
        self.walls.append(self.head)
        self.score = 0
        self.obstacles = []

    def set_obstacles(self, obstacle_pos):
        obstacle = []
        for tup in obstacle_pos:
            obstacle.append(cube(tup, color=(255, 255, 255)))
        self.obstacles = obstacle

    def move(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

            keys = pygame.key.get_pressed()

            for key in keys:
                # print("Head position:", self.head.pos) # lets us see grid pos for head
                if keys[pygame.K_LEFT]:
                    self.dirnx = -1
                    self.dirny = 0
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_RIGHT]:
                    self.dirnx = 1
                    self.dirny = 0
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_UP]:
                    self.dirnx = 0
                    self.dirny = -1
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_DOWN]:
                    self.dirnx = 0
                    self.dirny = 1
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        for i, c in enumerate(self.body):
            p = c.pos[:]
            if p in self.turns:
                turn = self.turns[p]
                c.move(turn[0], turn[1])
                if i == len(self.body) - 1:
                    self.turns.pop(p)
            else:
                if c.dirnx == -1 and c.pos[0] <= 0:
                    c.pos = (c.rows - 1, c.pos[1])
                elif c.dirnx == 1 and c.pos[0] >= c.rows - 1:
                    c.pos = (0, c.pos[1])
                elif c.dirny == 1 and c.pos[1] >= c.rows - 1:
                    c.pos = (c.pos[0], 0)
                elif c.dirny == -1 and c.pos[1] <= 0:
                    c.pos = (c.pos[0], c.rows - 1)
                else:
                    c.move(c.dirnx, c.dirny)

    def moveAuto(self, key):  # use this move method when directions are generated by successor method
        # todo: feed only actions into moveAuto - successors will have state, action, cost
        # print(key)

        if key == "LEFT":
            self.dirnx = -1
            self.dirny = 0
            self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        elif key == "RIGHT":
            self.dirnx = 1
            self.dirny = 0
            self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        elif key == "UP":
            self.dirnx = 0
            self.dirny = -1
            self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        elif key == "DOWN":
            self.dirnx = 0
            self.dirny = 1
            self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        for i, c in enumerate(self.body):
            p = c.pos[:]
            if p in self.turns:
                turn = self.turns[p]
                c.move(turn[0], turn[1])
                if i == len(self.body) - 1:
                    self.turns.pop(p)
            else:
                if c.dirnx == -1 and c.pos[0] <= 0:
                    c.pos = (c.rows - 1, c.pos[1])
                elif c.dirnx == 1 and c.pos[0] >= c.rows - 1:
                    c.pos = (0, c.pos[1])
                elif c.dirny == 1 and c.pos[1] >= c.rows - 1:
                    c.pos = (c.pos[0], 0)
                elif c.dirny == -1 and c.pos[1] <= 0:
                    c.pos = (c.pos[0], c.rows - 1)
                else:
                    c.move(c.dirnx, c.dirny)
        # exit()

    def reset(self, pos):
        self.head = cube(pos)
        self.body = []
        self.body.append(self.head)
        self.turns = {}
        self.dirnx = 0
        self.dirny = 1

        self.walls = self.body
        self.score = 0

    def addCube(self):
        tail = self.body[-1]
        dx, dy = tail.dirnx, tail.dirny

        if dx == 1 and dy == 0:
            self.body.append(cube((tail.pos[0] - 1, tail.pos[1])))
            self.walls = self.body
        elif dx == -1 and dy == 0:
            self.body.append(cube((tail.pos[0] + 1, tail.pos[1])))
            self.walls = self.body
        elif dx == 0 and dy == 1:
            self.body.append(cube((tail.pos[0], tail.pos[1] - 1)))
            self.walls = self.body
        elif dx == 0 and dy == -1:
            self.body.append(cube((tail.pos[0], tail.pos[1] + 1)))
            self.walls = self.body

        global allWalls
        allWalls = self.body

        self.body[-1].dirnx = dx
        self.body[-1].dirny = dy

    def draw(self, surface):
        for i, c in enumerate(self.body):
            if i == 0:
                c.draw(surface, True)
            else:
                c.draw(surface)

    def isGoalState(self, current_pos):
        if current_pos == tempFood.pos:
            # print("Goal state!")
            return True
        else:
            return False

    def getStartState(self):
        return self.head.pos

    def getSuccessors(self, current_pos):  # more like surrounding grid positions
        """returns a tuple of states, actions, costs"""

        '''Theoretically the max # of successors that can be generated at once should be 3: in front of the head,
        and the two sides of the head (if we have not eaten food yet we can have 4 successors). We will also make it so
        that the snake can not wrap around the screen.'''

        cost = 0
        wallPositions = []
        for x, wall in enumerate(self.walls):
            wallPositions.append(wall.pos)
        for x, obs in enumerate(self.obstacles):
            wallPositions.append(obs.pos)
        successors = []  # tuple of states, actions, cost (grid pos, direction to get there, cost to get there)
        x, y = current_pos
        possible_moves = [-1, 1]  # x or y can either stay, increase or decrease position by 1
        # print("Current pos (successor function):", current_pos)

        # look at successors for y axis
        for movesX in possible_moves:
            nextX = x + movesX  # x will move, y will stay the same
            nextY = y
            if nextX < 0 or nextX > GRID_SIZE - 1:  # make sure we don't go out of bounds
                continue
            nextState = nextX, nextY
            if nextState not in wallPositions:
                if nextState != current_pos:
                    if nextState not in successors:
                        directionX = ""
                        if movesX == 1:
                            directionX = "RIGHT"
                            cost = (euclideanCost(current_pos, tempFood.pos) / 2)  # prioritize left and right actions
                        elif movesX == -1:
                            directionX = "LEFT"
                            cost = (euclideanCost(current_pos, tempFood.pos) / 2)
                        successors.append((nextState, directionX, cost))

        # look at successors for y axis
        for moves in possible_moves:
            nextX = x
            nextY = y + moves  # y will move, x will stay the same
            if nextY < 0 or nextY > 19:  # make sure we don't go out of bounds
                continue
            nextState = nextX, nextY
            if nextState not in wallPositions:
                if nextState != current_pos:
                    if nextState not in successors:
                        directionY = ""
                        if moves == 1:
                            directionY = "DOWN"
                            cost = euclideanCost(current_pos, tempFood.pos)
                        elif moves == -1:
                            directionY = "UP"
                            cost = euclideanCost(current_pos, tempFood.pos)
                        successors.append((nextState, directionY, cost))

        # todo: toggle to see successors
        # print("Successors:", successors)
        return successors

def randomSnack(rows, item):
    positions = item.body
    while True:
        x = random.randrange(rows)
        y = random.randrange(rows)
        if len(list(filter(lambda z: z.pos == (x, y), positions))) > 0:
            continue
        else:
            break
    return (x, y)


def message_box(subject, content):
    root = tk.Tk()
    root.attributes("-topmost", True)
    root.withdraw()
    messagebox.showinfo(subject, content)
    try:
        root.destroy()
    except:
        pass


# global food
tempFood = cube((0, 0), 0, 0)
snack = cube((0, 0), 0, 0)
food = cube((0, 0), 0, 0)

startState = 0


# ------------------------------------------------- End of code setting up the basics of the snake game


# --------------------------------------------------------------------- Running the game normally
def main():
    global s, snack, startState
    # width = WINDOW_SIZE
    # rows = GRID_SIZE
    # win = pygame.display.set_mode((width, width))
    # startState = (10, 10)
    # my_screen = screen(WINDOW_SIZE,GRID_SIZE,(10, 10))
    my_screen = screen(WINDOW_SIZE, GRID_SIZE, START_POS)
    # s = snake((255, 0, 0), (10, 10))
    s = snake((255, 0, 0), startState)
    # snack = cube(randomSnack(rows, s), color=(0, 255, 0))
    snack.reset(randomSnack(my_screen.rows, s), color=(0, 255, 0))

    global food, tempFood
    food.reset(snack.pos, snack.dirnx, snack.dirny, snack.color)
    # tempFood = snack
    tempFood.reset(snack.pos, snack.dirnx, snack.dirny, snack.color)
    flag = True

    clock = pygame.time.Clock()

    keyPresses = ["UP", "LEFT", "UP", "LEFT", "UP", "LEFT"]

    while flag:
        # for index, position in enumerate(s.walls):  # we can use this to see current walls (basically our body)
        #     print("Walls:", position.pos)
        pygame.time.delay(50)
        clock.tick(10)
        s.move()
        # s.moveAuto(keyPresses)
        if s.body[0].pos == snack.pos:
            s.addCube()
            # snack = cube(randomSnack(rows, s), color=(0, 255, 0))
            snack.reset(randomSnack(rows, s), color=(0, 255, 0))

            # tempFood = food  # use this as testing to try to get food value before it changes
            tempFood.reset(food.pos, food.dirnx, food.dirny, food.color)

            # food = snack  # update food to new value
            food.reset(snack.pos, snack.dirnx, snack.dirny, snack.color)

        for x in range(len(s.body)):
            if s.body[x].pos in list(map(lambda z: z.pos, s.body[x + 1:])):
                print('Score:', len(s.body))
                # message_box('You Lost!\''', \'Play again...\'')
                message_box("u die'd", "dead")
                s.reset((10, 10))
                break

        my_screen.redrawWindow(s, snack)

        # test line
        s.getSuccessors(s.head.pos)  # the head's position works as our current position
        s.isGoalState(s.head.pos)


# --------------------------------------------------------------------- End of running the game normally

# --------------------------------------------------------------------- End of feeding snake game hardcoded directions

# DEFINE CONSTANTS

START_POS = (2, 2)
FOOD_POS = []


def foodPos(obstacle_pos=None):
    global FOOD_POS
    FOOD_POS = []
    for j in range(400):  # 400 grid positions, i.e. max num of food positions can be 400
        foodX = random.randrange(19)
        foodY = random.randrange(19)
        other = foodX, foodY
        if obstacle_pos is not None and other in obstacle_pos:
            j -= 1
            continue
        # print(food)
        FOOD_POS.append(other)
    print("Food pos ", FOOD_POS)


actionsList = [[], [], [], []]
scoreList = [0, 0, 0, 0]

# all calculated score, maintain over multiple runs
allCalcCosts = [[], [], [], []]

# all average score, calculated once
averageCalcCosts = [[], [], [], []]


# --------------------------------------------------------------------- A Star


# s: snake object
# i : iterator to keep track of where food will be
# slow: True go slow False go fast
def aStar_search(s, i, slow, my_screen, heuristic,speedrun=False):
    global width, rows, snack, tempFood, startState, food

    # my_screen = screen(WINDOW_SIZE,GRID_SIZE,START_POS)

    def performActions(dirs, slow):
        # perform actions in the game window so we can see the results
        for action in dirs:
            if slow:
                # pygame.time.delay(50)
                # clock.tick(90)
                pass
            s.moveAuto(action)
            my_screen.redrawWindow(s, snack)
    if speedrun:
        # print(i)
        snack.reset((i[0],i[1]), color=(0, 255, 0))
    else:

     snack.reset(randomSnack(my_screen.rows, s), color=(0, 255, 0))

    # tempFood = snack
    tempFood.reset(snack.pos, snack.dirnx, snack.dirny, snack.color)

    clock = pygame.time.Clock()
    flag = True

    aStar_priorityqueue = PriorityQueue()  # fringe
    visited = set()
    aStar_priorityqueue.push((s.getStartState(), [], 0), 0)

    while 1:
        if aStar_priorityqueue.isEmpty():
            break

        current, directions, costs = aStar_priorityqueue.pop()  # add costs for ucs
        # print("Current:", current)
        if current not in visited:
            visited.add(current)
            if s.isGoalState(current):
                s.score += 1
                s.addCube()
                performActions(directions, slow)
                # print("A_Star number of actions:", len(directions))
                actionsList[2].append(len(directions))
                # print("A_Star score:", len(s.body))
                scoreList[2] = len(s.body)
                # scoreList[2] = s.score
            for childNode, direction, cost in s.getSuccessors(current):
                if childNode not in aStar_priorityqueue.heap:
                    if childNode in visited:  # make sure child is not in visited so we don't go backwards
                        continue
                    hCost = costs + cost + heuristic(childNode)
                    aStar_priorityqueue.push((childNode, directions + [direction], costs + cost), hCost)


# --------------------------------------------------------------------- End of A Star

# use main() for human gameplay
if __name__ == '__main__':
    scores = {"astar": [], "ucs": []}
    mySnake = snake(RED, START_POS)
    if len(sys.argv) == 1:
        for num in range(5):
            #creates a screen and initilizes the obstacles and the wall
            #11 is the number of obstacles
            my_screen = screen(WINDOW_SIZE, GRID_SIZE, START_POS, 11)

            mySnake.set_obstacles(my_screen.wall)

            print("This is my wall ", my_screen.wall)
            for i in range(0, 400):
                aStar_search(mySnake, i, False, my_screen, nullHeuristic)
            scores["ucs"].append(mySnake.score)
            print("ucs score " + str(mySnake.score))
            mySnake.reset(START_POS)
            pygame.quit()
            my_screen = screen(WINDOW_SIZE, GRID_SIZE, START_POS, 11)
            for i in range(400):
                aStar_search(mySnake, i, False, my_screen, manhattanHeuristic)
            scores["astar"].append(mySnake.score)
            print("astar score " + str(mySnake.score))
            mySnake.reset(START_POS)
            pygame.quit()
    else:
        #todo check collision with speed_run apples
        lst=["20","50","100","200","400"]
        file = open(sys.argv[1],"r")
        for num in range(5):
            #reads from the file named speed_run where every two lines is
            #a premade list of apples,walls locations!
            apples = eval(file.readline())
            walls = eval(file.readline())
            #creates a screen and initilizes the obstacles and the wall
            #11 is the number of obstacles
            my_screen = screen(WINDOW_SIZE, GRID_SIZE, START_POS, 11,walls)
            mySnake.set_obstacles(my_screen.wall)
            for i in range(len(apples)):
                aStar_search(mySnake, apples[i], False, my_screen, nullHeuristic,True)
            scores["ucs"].append([lst[num],mySnake.score])
            print(lst[num] + " apples, ucs score " + str(mySnake.score))
            mySnake.reset(START_POS)
            pygame.quit()
            my_screen = screen(WINDOW_SIZE, GRID_SIZE, START_POS, 11,walls)
            for i in range(len(apples)):
                aStar_search(mySnake, apples[i], False, my_screen, manhattanHeuristic,True)
            scores["astar"].append([lst[num],mySnake.score])
            print(lst[num]+" apples, astar score "+  str(mySnake.score))
            mySnake.reset(START_POS)
            pygame.quit()
    print(scores)
